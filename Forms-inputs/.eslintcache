[{"C:\\Users\\asus\\OneDrive\\Desktop\\React-practice\\Forms-inputs\\src\\index.js":"1","C:\\Users\\asus\\OneDrive\\Desktop\\React-practice\\Forms-inputs\\src\\App.js":"2","C:\\Users\\asus\\OneDrive\\Desktop\\React-practice\\Forms-inputs\\src\\components\\SimpleInput.js":"3","C:\\Users\\asus\\OneDrive\\Desktop\\React-practice\\Forms-inputs\\src\\hooks\\user-input.js":"4","C:\\Users\\asus\\OneDrive\\Desktop\\React-practice\\Forms-inputs\\src\\components\\BasicForm.js":"5"},{"size":142,"mtime":1616595887000,"results":"6","hashOfConfig":"7"},{"size":162,"mtime":1625422461747,"results":"8","hashOfConfig":"7"},{"size":2177,"mtime":1625423210854,"results":"9","hashOfConfig":"7"},{"size":720,"mtime":1625423120686,"results":"10","hashOfConfig":"7"},{"size":2829,"mtime":1625424665856,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19z918y",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":10,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\asus\\OneDrive\\Desktop\\React-practice\\Forms-inputs\\src\\index.js",[],"C:\\Users\\asus\\OneDrive\\Desktop\\React-practice\\Forms-inputs\\src\\App.js",[],"C:\\Users\\asus\\OneDrive\\Desktop\\React-practice\\Forms-inputs\\src\\components\\SimpleInput.js",["25","26","27","28","29","30","31","32","33","34"],"import {useState} from \"react\";\nimport useInput from \"../hooks/user-input\";\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid:enteredNameIsValid,\n    hasError: nameInputhaserror,\n    valuechangehandler: namechangehandler,\n    inputblurhandler: nameblurhandler,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const [enteredemail, setenteredemail] = useState(\"\");\n  const enteredemailisinvalid = !enteredemailisvalid && enteredemailtouched;\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredemailisvalid) {\n    formIsValid = true;\n  }\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    setenteredemailtouched(true);\n    if (!enteredNameIsValid && !enteredemailisvalid) {\n      return;\n    }\n\n    console.log(enteredName, enteredemail);\n\n    // nameInputRef.current.value = ''; => NOT IDEAL, DON'T MANIPULATE THE DOM\n    setEnteredName(\"\");\n    setenteredemail(\"\");\n    setenteredemailtouched(false);\n    setEnteredNameTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputChangeHandler = (e) => {\n    setenteredemail(e.target.value);\n  };\n\n  const emailInputBlurHandler = () => {\n    setenteredemailtouched(true);\n  };\n  const emailInputClasses = enteredemailisinvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={namechangehandler}\n          onBlur={nameblurhandler}\n          value={enteredName}\n        />\n        {nameInputhaserror && (\n          <p className=\"error-text\">Name must not be empty.</p>\n        )}\n      </div>\n      <div className={emailInputClasses}>\n        <label htmlFor=\"name\">Your Email</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n          value={enteredemail}\n        />\n        {enteredemailisinvalid && (\n          <p className=\"error-text\">Email must contain @.</p>\n        )}\n      </div>\n\n      <div className=\"form-actions\">\n        {!formIsValid ? (\n          <button disabled>Submit</button>\n        ) : (\n          <button>Submit</button>\n        )}\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n",["35","36"],"C:\\Users\\asus\\OneDrive\\Desktop\\React-practice\\Forms-inputs\\src\\hooks\\user-input.js",[],"C:\\Users\\asus\\OneDrive\\Desktop\\React-practice\\Forms-inputs\\src\\components\\BasicForm.js",["37","38","39"],"import useInput from \"../hooks/user-input\";\n\nconst BasicForm = () => {\n  const {\n    value: firstname,\n    isValid: firstnameisvalid,\n    hasError: firstnamehaserror,\n    valueChangeHandler: firstnamechange,\n    inputBlurHandler: firstnameblur,\n    reset: firstnamereset,\n  } = useInput((value) => value !== \"\");\n\n  const {\n    value: lastname,\n    isValid: lastnameisvalid,\n    hasError: lastnamehaserror,\n    valueChangeHandler: lastnamechange,\n    inputBlurHandler: lastnameblur,\n    reset: lastnamereset,\n  } = useInput((value) => value !== \"\");\n\n  const {\n    value: email,\n    isValid: emailisvalid,\n    hasError: emailhaserror,\n    valueChangeHandler: emailchange,\n    inputBlurHandler: emailblur,\n    reset: emailreset,\n  } = useInput((value) => value.includes(\"@\"));\n\n  let formisvalid = false;\n\n  const firstnameclasses = firstnamehaserror\n    ? \"form-control invalid\"\n    : \"form-control\";\n  const lastnameclasses = lastnamehaserror\n    ? \"form-control invalid\"\n    : \"form-control\";\n  const emailclasses = emailhaserror ? \"form-control invalid\" : \"form-control\";\n\n  if (firstnameisvalid || lastnameisvalid || emailisvalid) {\n    formisvalid = true;\n  }\n  const formsubmit = (e) => {\n    e.preventDefault();\n    if (!formisvalid) {\n      return;\n    }\n    console.log(firstname, lastname, email);\n    firstnamereset();\n    lastnamereset();\n    emailreset();\n  };\n\n  return (\n    <form onSubmit={formsubmit}>\n      <div className=\"control-group\">\n        <div className={firstnameclasses}>\n          <label htmlFor=\"name\">First Name</label>\n          <input\n            value={firstname}\n            onChange={firstnamechange}\n            type=\"text\"\n            id=\"name\"\n          />\n          {firstnamehaserror && (\n            <p className=\"error-text\">Please enter a first name</p>\n          )}\n        </div>\n        <div className={lastnameclasses}>\n          <label htmlFor=\"name\">Last Name</label>\n          <input\n            type=\"text\"\n            value={lastname}\n            id=\"name\"\n            onChange={lastnamechange}\n          />\n          {lastnamehaserror && (\n            <p className=\"error-text\">Please enter a last name</p>\n          )}\n        </div>\n      </div>\n      <div className={emailclasses}>\n        <label htmlFor=\"name\">E-Mail Address</label>\n        <input type=\"text\" id=\"name\" value={email} onChange={emailchange} />\n        {emailhaserror && <p className=\"error-text\">Please enter an Email</p>}\n      </div>\n      {formisvalid && (\n        <div className=\"form-control invalid\">\n          <label htmlFor=\"name\">E-Mail Address</label>\n          <input type=\"text\" id=\"name\" onChange={emailchange} />\n        </div>\n      )}\n      <div className=\"form-actions\">\n        <button disabled={!formisvalid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n",{"ruleId":"40","severity":2,"message":"41","line":13,"column":34,"nodeType":"42","messageId":"43","endLine":13,"endColumn":53},{"ruleId":"40","severity":2,"message":"44","line":13,"column":57,"nodeType":"42","messageId":"43","endLine":13,"endColumn":76},{"ruleId":"40","severity":2,"message":"41","line":16,"column":29,"nodeType":"42","messageId":"43","endLine":16,"endColumn":48},{"ruleId":"40","severity":2,"message":"45","line":23,"column":5,"nodeType":"42","messageId":"43","endLine":23,"endColumn":27},{"ruleId":"40","severity":2,"message":"41","line":24,"column":33,"nodeType":"42","messageId":"43","endLine":24,"endColumn":52},{"ruleId":"40","severity":2,"message":"46","line":31,"column":5,"nodeType":"42","messageId":"43","endLine":31,"endColumn":19},{"ruleId":"40","severity":2,"message":"45","line":33,"column":5,"nodeType":"42","messageId":"43","endLine":33,"endColumn":27},{"ruleId":"40","severity":2,"message":"47","line":34,"column":5,"nodeType":"42","messageId":"43","endLine":34,"endColumn":26},{"ruleId":"40","severity":2,"message":"48","line":37,"column":28,"nodeType":"42","messageId":"43","endLine":37,"endColumn":46},{"ruleId":"40","severity":2,"message":"45","line":46,"column":5,"nodeType":"42","messageId":"43","endLine":46,"endColumn":27},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":9,"column":23,"nodeType":"42","messageId":"55","endLine":9,"endColumn":36},{"ruleId":"53","severity":1,"message":"56","line":18,"column":23,"nodeType":"42","messageId":"55","endLine":18,"endColumn":35},{"ruleId":"53","severity":1,"message":"57","line":27,"column":23,"nodeType":"42","messageId":"55","endLine":27,"endColumn":32},"no-undef","'enteredemailisvalid' is not defined.","Identifier","undef","'enteredemailtouched' is not defined.","'setenteredemailtouched' is not defined.","'setEnteredName' is not defined.","'setEnteredNameTouched' is not defined.","'nameInputIsInvalid' is not defined.","no-native-reassign",["58"],"no-negated-in-lhs",["59"],"no-unused-vars","'firstnameblur' is assigned a value but never used.","unusedVar","'lastnameblur' is assigned a value but never used.","'emailblur' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]