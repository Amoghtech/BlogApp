{"version":3,"sources":["components/comments/Comments.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","CommentItem","props","className","classes","item","text","CommentsList","comments","map","comment","id","NewCommentForm","commentTextRef","useRef","useHttp","addComment","sendRequest","error","status","onAddComment","useEffect","submitFormHandler","event","preventDefault","quoteId","commentdata","current","value","LoadingSpinner","form","onSubmit","control","htmlFor","rows","ref","actions","type","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addcommenthandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","console","log","getsinglequote","loadedquote","match","useRouteMatch","path","exact","to","url"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,MAAQ,kC,mHCSXC,EARK,SAACC,GACnB,OACE,oBAAIC,UAAWC,IAAQC,KAAvB,SACE,4BAAIH,EAAMI,U,iBCQDC,EAVM,SAACL,GACpB,OACE,oBAAIC,UAAWC,IAAQI,SAAvB,SACGN,EAAMM,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BJ,KAAMI,EAAQJ,MAA1BI,EAAQC,U,yBC8CnBC,EAhDQ,SAACV,GACtB,IAAMW,EAAiBC,mBAEvB,EAAqCC,YAAQC,KAAY,GAAlDC,EAAP,EAAOA,YAAaC,EAApB,EAAoBA,MAAOC,EAA3B,EAA2BA,OACpBC,EAAgBlB,EAAhBkB,aACPC,qBAAU,WACO,cAAXF,GAA2BD,GAC7BE,MAED,CAACD,EAAQD,EAAOE,IAEnB,IAAME,EAAoB,SAACC,GACzBA,EAAMC,iBAKNP,EAAY,CACVQ,QAASvB,EAAMuB,QACfC,YAAab,EAAec,QAAQC,SAIxC,MAAe,YAAXT,EAEA,qBAAKhB,UAAU,WAAf,SACE,cAAC0B,EAAA,EAAD,MAQJ,uBAAM1B,UAAWC,IAAQ0B,KAAMC,SAAUT,EAAzC,UACE,sBAAKnB,UAAWC,IAAQ4B,QAASD,SAAUT,EAA3C,UACE,uBAAOW,QAAQ,UAAf,0BACA,0BAAUtB,GAAG,UAAUuB,KAAK,IAAIC,IAAKtB,OAEvC,qBAAKV,UAAWC,IAAQgC,QAAxB,SACE,wBAAQC,KAAK,SAASlC,UAAU,MAAhC,+B,OCyBOmC,EA9DE,SAACpC,GAChB,MAA8CqC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KAEMC,EAASC,cAEf,EAII5B,YAAQ6B,KAAgB,GAH1B3B,EADF,EACEA,YACAE,EAFF,EAEEA,OACM0B,EAHR,EAGEC,KAGFzB,qBAAU,WACRJ,EAAYyB,EAAOjB,WAClB,CAACiB,EAAOjB,QAASR,IAEpB,IAQIT,EAJEuC,EAAoBC,uBAAY,WACpC/B,EAAYyB,EAAOjB,WACnB,CAACR,EAAYyB,EAAOjB,UAsBtB,MAnBe,YAAXN,IACFX,EACE,qBAAKL,UAAU,WAAf,SACE,cAAC0B,EAAA,EAAD,OAKS,cAAXV,GAA0B0B,GAAkBA,EAAeI,OAAS,IACtEzC,EAAW,cAAC,EAAD,CAAcA,SAAUqC,KAIxB,cAAX1B,GACE0B,GAA4C,IAA1BA,EAAeI,SAEnCzC,EAAW,mBAAGL,UAAU,WAAb,yCAIX,0BAASA,UAAWC,IAAQI,SAA5B,UACE,gDACEgC,GACA,wBAAQrC,UAAU,MAAM+C,QAhCC,WAC7BT,GAAmB,IA+Bf,2BAIDD,GACC,cAAC,EAAD,CACEf,QAASvB,EAAMuB,QACfL,aAAc2B,IAGlB,4BAAIvC,Q,wBCtDK2C,EATU,SAACjD,GACxB,OACE,yBAAQC,UAAWC,IAAQgD,MAA3B,UACE,4BAAIlD,EAAMI,OACV,qCAAaJ,EAAMmD,aC8DVC,UAhDK,WAClB,IAAMZ,EAASC,cACfY,QAAQC,IAAId,EAAOjB,SAEnB,MAKIV,YAAQ0C,KAAgB,GAJ1BxC,EADF,EACEA,YACAE,EAFF,EAEEA,OACMuC,EAHR,EAGEZ,KACA5B,EAJF,EAIEA,MAGIyC,EAAQC,cAQd,OAJAvC,qBAAU,WACRJ,EAAYyB,EAAOjB,WAClB,CAACR,EAAayB,EAAOjB,UAEX,YAATN,EACK,qBAAKhB,UAAU,WAAf,SAA0B,cAAC0B,EAAA,EAAD,MAIhCX,EACQ,mBAAGf,UAAU,WAAb,SAAyBe,IAGhCwC,EAAYpD,KAId,qCACE,cAAC,EAAD,CAAkBA,KAAMoD,EAAYpD,KAAM+C,OAAQK,EAAYL,SAC9D,cAAC,IAAD,CAAOQ,KAAMF,EAAME,KAAMC,OAAK,EAA9B,SACE,qBAAK3D,UAAU,WAAf,SACE,cAAC,IAAD,CAAM4D,GAAE,UAAKJ,EAAMK,IAAX,aAA2B7D,UAAU,YAA7C,+BAKJ,cAAC,IAAD,CAAO0D,KAAI,UAAKF,EAAME,KAAX,aAAX,SACE,cAAC,EAAD,CAAUpC,QAASiB,EAAOjB,eAbrB,mBAAGtB,UAAU,WAAb","file":"static/js/4.a8985852.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__2PWeY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__2ls1P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__AbKfq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__3mS7s\",\"loading\":\"NewCommentForm_loading__gsUOE\",\"control\":\"NewCommentForm_control__1IVE2\",\"actions\":\"NewCommentForm_actions__3uf26\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__2ejIw\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import {useRef, useEffect} from \"react\";\nimport {addComment} from \"../../lib/api\";\nimport useHttp from \"../../hooks/use-http\";\nimport classes from \"./NewCommentForm.module.css\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const {sendRequest, error, status} = useHttp(addComment, false);\n  const {onAddComment} = props;\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddComment();\n    }\n  }, [status, error, onAddComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n    // console.log(commentTextRef.current.value);\n    // send comment to server\n    sendRequest({\n      quoteId: props.quoteId,\n      commentdata: commentTextRef.current.value,\n    });\n  };\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner></LoadingSpinner>\n      </div>\n    );\n  }\n\n  // if(status==='completed' && ())\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button type=\"submit\" className=\"btn\">\n          Add Comment\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import {useCallback, useEffect, useState} from \"react\";\nimport useHttp from \"../../hooks/use-http\";\nimport classes from \"./Comments.module.css\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport {useParams} from \"react-router-dom\";\nimport {getAllComments} from \"../../lib/api\";\nconst Comments = (props) => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  const params = useParams();\n\n  const {\n    sendRequest,\n    status,\n    data: loadedComments,\n  } = useHttp(getAllComments, true);\n\n  useEffect(() => {\n    sendRequest(params.quoteId);\n  }, [params.quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addcommenthandler = useCallback(() => {\n    sendRequest(params.quoteId)\n  },[sendRequest,params.quoteId]);\n\n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner></LoadingSpinner>\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No Comments were added yet</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={props.quoteId}\n          onAddComment={addcommenthandler}\n        />\n      )}\n      <p>{comments}</p>\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import Comments from \"../components/comments/Comments\";\r\nimport {useParams, Route, Link, useRouteMatch} from \"react-router-dom\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport {getsinglequote} from \"../lib/api\";\r\nimport {useEffect} from \"react\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n// const quotesr = [\r\n//   {\r\n//     id: \"q1\",\r\n//     author: \"Mark Zuckerberg\",\r\n//     text: \"Hello guyz\",\r\n//   },\r\n//   {\r\n//     id: \"q2\",\r\n//     author: \"James Bond\",\r\n//     text: \"i'm detective\",\r\n//   },\r\n// ];\r\n\r\nconst QuoteDetail = () => {\r\n  const params = useParams();\r\n  console.log(params.quoteId);\r\n\r\n  const {\r\n    sendRequest,\r\n    status,\r\n    data: loadedquote,\r\n    error,\r\n  } = useHttp(getsinglequote, true);\r\n\r\n  const match = useRouteMatch();\r\n\r\n//   console.log(match);\r\n  //   const quote = quotesr.find((q) => q.id === params.quoteId);\r\n  useEffect(() => {\r\n    sendRequest(params.quoteId);\r\n  }, [sendRequest, params.quoteId]);\r\n\r\n  if (status==='pending') {\r\n    return <div className=\"centered\"><LoadingSpinner/></div>;\r\n  }\r\n\r\n\r\n  if(error){\r\n      return <p className=\"centered\">{error}</p>\r\n  }\r\n\r\n  if(!loadedquote.text){\r\n      return <p className=\"centered\">No quote found!</p>\r\n  }\r\n  return (\r\n    <>\r\n      <HighlightedQuote text={loadedquote.text} author={loadedquote.author} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link to={`${match.url}/comments`} className=\"btn--flat\">\r\n            Load Comments\r\n          </Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments quoteId={params.quoteId} />\r\n      </Route>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}